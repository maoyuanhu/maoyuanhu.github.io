(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{535:function(s,n,e){"use strict";e.r(n);var a=e(1),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),n("p",[s._v("Class 可以通过"),n("code",[s._v("extends")]),s._v("关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Point {\n}\n\nclass ColorPoint extends Point {\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面代码定义了一个"),n("code",[s._v("ColorPoint")]),s._v("类，该类通过"),n("code",[s._v("extends")]),s._v("关键字，继承了"),n("code",[s._v("Point")]),s._v("类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个"),n("code",[s._v("Point")]),s._v("类。下面，我们在"),n("code",[s._v("ColorPoint")]),s._v("内部加上代码。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("constructor")]),s._v("方法和"),n("code",[s._v("toString")]),s._v("方法之中，都出现了"),n("code",[s._v("super")]),s._v("关键字，它在这里表示父类的构造函数，用来新建父类的"),n("code",[s._v("this")]),s._v("对象。")]),s._v(" "),n("p",[s._v("子类必须在"),n("code",[s._v("constructor")]),s._v("方法中调用"),n("code",[s._v("super")]),s._v("方法，否则新建实例时会报错。这是因为子类没有自己的"),n("code",[s._v("this")]),s._v("对象，而是继承父类的"),n("code",[s._v("this")]),s._v("对象，然后对其进行加工。如果不调用"),n("code",[s._v("super")]),s._v("方法，子类就得不到"),n("code",[s._v("this")]),s._v("对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Point { /* ... */ }\n\nclass ColorPoint extends Point {\n  constructor() {\n  }\n}\n\nlet cp = new ColorPoint(); // ReferenceError\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("ColorPoint")]),s._v("继承了父类"),n("code",[s._v("Point")]),s._v("，但是它的构造函数没有调用"),n("code",[s._v("super")]),s._v("方法，导致新建实例时报错。")]),s._v(" "),n("p",[s._v("ES5 的继承，实质是先创造子类的实例对象"),n("code",[s._v("this")]),s._v("，然后再将父类的方法添加到"),n("code",[s._v("this")]),s._v("上面（"),n("code",[s._v("Parent.apply(this)")]),s._v("）。ES6 的继承机制完全不同，实质是先创造父类的实例对象"),n("code",[s._v("this")]),s._v("（所以必须先调用"),n("code",[s._v("super")]),s._v("方法），然后再用子类的构造函数修改"),n("code",[s._v("this")]),s._v("。")]),s._v(" "),n("p",[s._v("如果子类没有定义"),n("code",[s._v("constructor")]),s._v("方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有"),n("code",[s._v("constructor")]),s._v("方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class ColorPoint extends Point {\n}\n\n// 等同于\nclass ColorPoint extends Point {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("另一个需要注意的地方是，在子类的构造函数中，只有调用"),n("code",[s._v("super")]),s._v("之后，才可以使用"),n("code",[s._v("this")]),s._v("关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有"),n("code",[s._v("super")]),s._v("方法才能返回父类实例。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    this.color = color; // ReferenceError\n    super(x, y);\n    this.color = color; // 正确\n  }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("上面代码中，子类的"),n("code",[s._v("constructor")]),s._v("方法没有调用"),n("code",[s._v("super")]),s._v("之前，就使用"),n("code",[s._v("this")]),s._v("关键字，结果报错，而放在"),n("code",[s._v("super")]),s._v("方法之后就是正确的。")]),s._v(" "),n("p",[s._v("下面是生成子类实例的代码。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let cp = new ColorPoint(25, 8, 'green');\n\ncp instanceof ColorPoint // true\ncp instanceof Point // true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("上面代码中，实例对象"),n("code",[s._v("cp")]),s._v("同时是"),n("code",[s._v("ColorPoint")]),s._v("和"),n("code",[s._v("Point")]),s._v("两个类的实例，这与 ES5 的行为完全一致。")]),s._v(" "),n("p",[s._v("最后，父类的静态方法，也会被子类继承。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n  static hello() {\n    console.log('hello world');\n  }\n}\n\nclass B extends A {\n}\n\nB.hello()  // hello world\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("hello()")]),s._v("是"),n("code",[s._v("A")]),s._v("类的静态方法，"),n("code",[s._v("B")]),s._v("继承"),n("code",[s._v("A")]),s._v("，也继承了"),n("code",[s._v("A")]),s._v("的静态方法。")]),s._v(" "),n("h2",{attrs:{id:"object-getprototypeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-getprototypeof"}},[s._v("#")]),s._v(" Object.getPrototypeOf()")]),s._v(" "),n("p",[n("code",[s._v("Object.getPrototypeOf")]),s._v("方法可以用来从子类上获取父类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.getPrototypeOf(ColorPoint) === Point\n// true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("因此，可以使用这个方法判断，一个类是否继承了另一个类。")]),s._v(" "),n("h2",{attrs:{id:"super-关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#super-关键字"}},[s._v("#")]),s._v(" super 关键字")]),s._v(" "),n("p",[n("code",[s._v("super")]),s._v("这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。")]),s._v(" "),n("p",[s._v("第一种情况，"),n("code",[s._v("super")]),s._v("作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次"),n("code",[s._v("super")]),s._v("函数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {}\n\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面代码中，子类"),n("code",[s._v("B")]),s._v("的构造函数之中的"),n("code",[s._v("super()")]),s._v("，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。")]),s._v(" "),n("p",[s._v("注意，"),n("code",[s._v("super")]),s._v("虽然代表了父类"),n("code",[s._v("A")]),s._v("的构造函数，但是返回的是子类"),n("code",[s._v("B")]),s._v("的实例，即"),n("code",[s._v("super")]),s._v("内部的"),n("code",[s._v("this")]),s._v("指的是"),n("code",[s._v("B")]),s._v("，因此"),n("code",[s._v("super()")]),s._v("在这里相当于"),n("code",[s._v("A.prototype.constructor.call(this)")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\nnew A() // A\nnew B() // B\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("new.target")]),s._v("指向当前正在执行的函数。可以看到，在"),n("code",[s._v("super()")]),s._v("执行时，它指向的是子类"),n("code",[s._v("B")]),s._v("的构造函数，而不是父类"),n("code",[s._v("A")]),s._v("的构造函数。也就是说，"),n("code",[s._v("super()")]),s._v("内部的"),n("code",[s._v("this")]),s._v("指向的是"),n("code",[s._v("B")]),s._v("。")]),s._v(" "),n("p",[s._v("作为函数时，"),n("code",[s._v("super()")]),s._v("只能用在子类的构造函数之中，用在其他地方就会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {}\n\nclass B extends A {\n  m() {\n    super(); // 报错\n  }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("super()")]),s._v("用在"),n("code",[s._v("B")]),s._v("类的"),n("code",[s._v("m")]),s._v("方法之中，就会造成句法错误。")]),s._v(" "),n("p",[s._v("第二种情况，"),n("code",[s._v("super")]),s._v("作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n  p() {\n    return 2;\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.p()); // 2\n  }\n}\n\nlet b = new B();\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("上面代码中，子类"),n("code",[s._v("B")]),s._v("当中的"),n("code",[s._v("super.p()")]),s._v("，就是将"),n("code",[s._v("super")]),s._v("当作一个对象使用。这时，"),n("code",[s._v("super")]),s._v("在普通方法之中，指向"),n("code",[s._v("A.prototype")]),s._v("，所以"),n("code",[s._v("super.p()")]),s._v("就相当于"),n("code",[s._v("A.prototype.p()")]),s._v("。")]),s._v(" "),n("p",[s._v("这里需要注意，由于"),n("code",[s._v("super")]),s._v("指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过"),n("code",[s._v("super")]),s._v("调用的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n  constructor() {\n    this.p = 2;\n  }\n}\n\nclass B extends A {\n  get m() {\n    return super.p;\n  }\n}\n\nlet b = new B();\nb.m // undefined\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("p")]),s._v("是父类"),n("code",[s._v("A")]),s._v("实例的属性，"),n("code",[s._v("super.p")]),s._v("就引用不到它。")]),s._v(" "),n("p",[s._v("如果属性定义在父类的原型对象上，"),n("code",[s._v("super")]),s._v("就可以取到。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {}\nA.prototype.x = 2;\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.x) // 2\n  }\n}\n\nlet b = new B();\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("上面代码中，属性"),n("code",[s._v("x")]),s._v("是定义在"),n("code",[s._v("A.prototype")]),s._v("上面的，所以"),n("code",[s._v("super.x")]),s._v("可以取到它的值。")]),s._v(" "),n("p",[s._v("ES6 规定，通过"),n("code",[s._v("super")]),s._v("调用父类的方法时，方法内部的"),n("code",[s._v("this")]),s._v("指向子类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n  constructor() {\n    this.x = 1;\n  }\n  print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  m() {\n    super.print();\n  }\n}\n\nlet b = new B();\nb.m() // 2\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("super.print()")]),s._v("虽然调用的是"),n("code",[s._v("A.prototype.print()")]),s._v("，但是"),n("code",[s._v("A.prototype.print()")]),s._v("内部的"),n("code",[s._v("this")]),s._v("指向子类"),n("code",[s._v("B")]),s._v("，导致输出的是"),n("code",[s._v("2")]),s._v("，而不是"),n("code",[s._v("1")]),s._v("。也就是说，实际上执行的是"),n("code",[s._v("super.print.call(this)")]),s._v("。")]),s._v(" "),n("p",[s._v("由于"),n("code",[s._v("this")]),s._v("指向子类，所以如果通过"),n("code",[s._v("super")]),s._v("对某个属性赋值，这时"),n("code",[s._v("super")]),s._v("就是"),n("code",[s._v("this")]),s._v("，赋值的属性会变成子类实例的属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n  constructor() {\n    this.x = 1;\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n    super.x = 3;\n    console.log(super.x); // undefined\n    console.log(this.x); // 3\n  }\n}\n\nlet b = new B();\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("super.x")]),s._v("赋值为"),n("code",[s._v("3")]),s._v("，这时等同于对"),n("code",[s._v("this.x")]),s._v("赋值为"),n("code",[s._v("3")]),s._v("。而当读取"),n("code",[s._v("super.x")]),s._v("的时候，读的是"),n("code",[s._v("A.prototype.x")]),s._v("，所以返回"),n("code",[s._v("undefined")]),s._v("。")]),s._v(" "),n("p",[s._v("如果"),n("code",[s._v("super")]),s._v("作为对象，用在静态方法之中，这时"),n("code",[s._v("super")]),s._v("将指向父类，而不是父类的原型对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Parent {\n  static myMethod(msg) {\n    console.log('static', msg);\n  }\n\n  myMethod(msg) {\n    console.log('instance', msg);\n  }\n}\n\nclass Child extends Parent {\n  static myMethod(msg) {\n    super.myMethod(msg);\n  }\n\n  myMethod(msg) {\n    super.myMethod(msg);\n  }\n}\n\nChild.myMethod(1); // static 1\n\nvar child = new Child();\nchild.myMethod(2); // instance 2\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("super")]),s._v("在静态方法之中指向父类，在普通方法之中指向父类的原型对象。")]),s._v(" "),n("p",[s._v("注意，使用"),n("code",[s._v("super")]),s._v("的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super); // 报错\n  }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("console.log(super)")]),s._v("当中的"),n("code",[s._v("super")]),s._v("，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这时，如果能清晰地表明"),n("code",[s._v("super")]),s._v("的数据类型，就不会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.valueOf() instanceof B); // true\n  }\n}\n\nlet b = new B();\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("super.valueOf()")]),s._v("表明"),n("code",[s._v("super")]),s._v("是一个对象，因此就不会报错。同时，由于"),n("code",[s._v("super")]),s._v("使得"),n("code",[s._v("this")]),s._v("指向"),n("code",[s._v("B")]),s._v("，所以"),n("code",[s._v("super.valueOf()")]),s._v("返回的是一个"),n("code",[s._v("B")]),s._v("的实例。")]),s._v(" "),n("p",[s._v("最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用"),n("code",[s._v("super")]),s._v("关键字。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var obj = {\n  toString() {\n    return "MyObject: " + super.toString();\n  }\n};\n\nobj.toString(); // MyObject: [object Object]\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"类的-prototype-属性和-proto-属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的-prototype-属性和-proto-属性"}},[s._v("#")]),s._v(" 类的 prototype 属性和__proto__属性")]),s._v(" "),n("p",[s._v("大多数浏览器的 ES5 实现之中，每一个对象都有"),n("code",[s._v("__proto__")]),s._v("属性，指向对应的构造函数的"),n("code",[s._v("prototype")]),s._v("属性。Class 作为构造函数的语法糖，同时有"),n("code",[s._v("prototype")]),s._v("属性和"),n("code",[s._v("__proto__")]),s._v("属性，因此同时存在两条继承链。")]),s._v(" "),n("p",[s._v("（1）子类的"),n("code",[s._v("__proto__")]),s._v("属性，表示构造函数的继承，总是指向父类。")]),s._v(" "),n("p",[s._v("（2）子类"),n("code",[s._v("prototype")]),s._v("属性的"),n("code",[s._v("__proto__")]),s._v("属性，表示方法的继承，总是指向父类的"),n("code",[s._v("prototype")]),s._v("属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面代码中，子类"),n("code",[s._v("B")]),s._v("的"),n("code",[s._v("__proto__")]),s._v("属性指向父类"),n("code",[s._v("A")]),s._v("，子类"),n("code",[s._v("B")]),s._v("的"),n("code",[s._v("prototype")]),s._v("属性的"),n("code",[s._v("__proto__")]),s._v("属性指向父类"),n("code",[s._v("A")]),s._v("的"),n("code",[s._v("prototype")]),s._v("属性。")]),s._v(" "),n("p",[s._v("这样的结果是因为，类的继承是按照下面的模式实现的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n}\n\nclass B {\n}\n\n// B 的实例继承 A 的实例\nObject.setPrototypeOf(B.prototype, A.prototype);\n\n// B 的实例继承 A 的静态属性\nObject.setPrototypeOf(B, A);\n\nconst b = new B();\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("《对象的扩展》一章给出过"),n("code",[s._v("Object.setPrototypeOf")]),s._v("方法的实现。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.setPrototypeOf = function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("因此，就得到了上面的结果。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.setPrototypeOf(B.prototype, A.prototype);\n// 等同于\nB.prototype.__proto__ = A.prototype;\n\nObject.setPrototypeOf(B, A);\n// 等同于\nB.__proto__ = A;\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("这两条继承链，可以这样理解：作为一个对象，子类（"),n("code",[s._v("B")]),s._v("）的原型（"),n("code",[s._v("__proto__")]),s._v("属性）是父类（"),n("code",[s._v("A")]),s._v("）；作为一个构造函数，子类（"),n("code",[s._v("B")]),s._v("）的原型对象（"),n("code",[s._v("prototype")]),s._v("属性）是父类的原型对象（"),n("code",[s._v("prototype")]),s._v("属性）的实例。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.create(A.prototype);\n// 等同于\nB.prototype.__proto__ = A.prototype;\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"extends-的继承目标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extends-的继承目标"}},[s._v("#")]),s._v(" extends 的继承目标")]),s._v(" "),n("p",[n("code",[s._v("extends")]),s._v("关键字后面可以跟多种类型的值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class B extends A {\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("上面代码的"),n("code",[s._v("A")]),s._v("，只要是一个有"),n("code",[s._v("prototype")]),s._v("属性的函数，就能被"),n("code",[s._v("B")]),s._v("继承。由于函数都有"),n("code",[s._v("prototype")]),s._v("属性（除了"),n("code",[s._v("Function.prototype")]),s._v("函数），因此"),n("code",[s._v("A")]),s._v("可以是任意函数。")]),s._v(" "),n("p",[s._v("下面，讨论三种特殊情况。")]),s._v(" "),n("p",[s._v("第一种特殊情况，子类继承"),n("code",[s._v("Object")]),s._v("类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A extends Object {\n}\n\nA.__proto__ === Object // true\nA.prototype.__proto__ === Object.prototype // true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这种情况下，"),n("code",[s._v("A")]),s._v("其实就是构造函数"),n("code",[s._v("Object")]),s._v("的复制，"),n("code",[s._v("A")]),s._v("的实例就是"),n("code",[s._v("Object")]),s._v("的实例。")]),s._v(" "),n("p",[s._v("第二种特殊情况，不存在任何继承。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n}\n\nA.__proto__ === Function.prototype // true\nA.prototype.__proto__ === Object.prototype // true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这种情况下，"),n("code",[s._v("A")]),s._v("作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承"),n("code",[s._v("Function.prototype")]),s._v("。但是，"),n("code",[s._v("A")]),s._v("调用后返回一个空对象（即"),n("code",[s._v("Object")]),s._v("实例），所以"),n("code",[s._v("A.prototype.__proto__")]),s._v("指向构造函数（"),n("code",[s._v("Object")]),s._v("）的"),n("code",[s._v("prototype")]),s._v("属性。")]),s._v(" "),n("p",[s._v("第三种特殊情况，子类继承"),n("code",[s._v("null")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A extends null {\n}\n\nA.__proto__ === Function.prototype // true\nA.prototype.__proto__ === undefined // true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这种情况与第二种情况非常像。"),n("code",[s._v("A")]),s._v("也是一个普通函数，所以直接继承"),n("code",[s._v("Function.prototype")]),s._v("。但是，"),n("code",[s._v("A")]),s._v("调用后返回的对象不继承任何方法，所以它的"),n("code",[s._v("__proto__")]),s._v("指向"),n("code",[s._v("Function.prototype")]),s._v("，即实质上执行了下面的代码。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class C extends null {\n  constructor() { return Object.create(null); }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"实例的-proto-属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例的-proto-属性"}},[s._v("#")]),s._v(" 实例的 "),n("strong",[s._v("proto")]),s._v(" 属性")]),s._v(" "),n("p",[s._v("子类实例的"),n("code",[s._v("__proto__")]),s._v("属性的"),n("code",[s._v("__proto__")]),s._v("属性，指向父类实例的"),n("code",[s._v("__proto__")]),s._v("属性。也就是说，子类的原型的原型，是父类的原型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var p1 = new Point(2, 3);\nvar p2 = new ColorPoint(2, 3, 'red');\n\np2.__proto__ === p1.__proto__ // false\np2.__proto__.__proto__ === p1.__proto__ // true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("ColorPoint")]),s._v("继承了"),n("code",[s._v("Point")]),s._v("，导致前者原型的原型是后者的原型。")]),s._v(" "),n("p",[s._v("因此，通过子类实例的"),n("code",[s._v("__proto__.__proto__")]),s._v("属性，可以修改父类实例的行为。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("p2.__proto__.__proto__.printName = function () {\n  console.log('Ha');\n};\n\np1.printName() // \"Ha\"\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面代码在"),n("code",[s._v("ColorPoint")]),s._v("的实例"),n("code",[s._v("p2")]),s._v("上向"),n("code",[s._v("Point")]),s._v("类添加方法，结果影响到了"),n("code",[s._v("Point")]),s._v("的实例"),n("code",[s._v("p1")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"原生构造函数的继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原生构造函数的继承"}},[s._v("#")]),s._v(" 原生构造函数的继承")]),s._v(" "),n("p",[s._v("原生构造函数是指语言内置的构造函数，通常用来生成数据结构。ECMAScript 的原生构造函数大致有下面这些。")]),s._v(" "),n("ul",[n("li",[s._v("Boolean()")]),s._v(" "),n("li",[s._v("Number()")]),s._v(" "),n("li",[s._v("String()")]),s._v(" "),n("li",[s._v("Array()")]),s._v(" "),n("li",[s._v("Date()")]),s._v(" "),n("li",[s._v("Function()")]),s._v(" "),n("li",[s._v("RegExp()")]),s._v(" "),n("li",[s._v("Error()")]),s._v(" "),n("li",[s._v("Object()")])]),s._v(" "),n("p",[s._v("以前，这些原生构造函数是无法继承的，比如，不能自己定义一个"),n("code",[s._v("Array")]),s._v("的子类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function MyArray() {\n  Array.apply(this, arguments);\n}\n\nMyArray.prototype = Object.create(Array.prototype, {\n  constructor: {\n    value: MyArray,\n    writable: true,\n    configurable: true,\n    enumerable: true\n  }\n});\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("上面代码定义了一个继承 Array 的"),n("code",[s._v("MyArray")]),s._v("类。但是，这个类的行为与"),n("code",[s._v("Array")]),s._v("完全不一致。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var colors = new MyArray();\ncolors[0] = "red";\ncolors.length  // 0\n\ncolors.length = 0;\ncolors[0]  // "red"\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("之所以会发生这种情况，是因为子类无法获得原生构造函数的内部属性，通过"),n("code",[s._v("Array.apply()")]),s._v("或者分配给原型对象都不行。原生构造函数会忽略"),n("code",[s._v("apply")]),s._v("方法传入的"),n("code",[s._v("this")]),s._v("，也就是说，原生构造函数的"),n("code",[s._v("this")]),s._v("无法绑定，导致拿不到内部属性。")]),s._v(" "),n("p",[s._v("ES5 是先新建子类的实例对象"),n("code",[s._v("this")]),s._v("，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数。比如，"),n("code",[s._v("Array")]),s._v("构造函数有一个内部属性"),n("code",[s._v("[[DefineOwnProperty]]")]),s._v("，用来定义新属性时，更新"),n("code",[s._v("length")]),s._v("属性，这个内部属性无法在子类获取，导致子类的"),n("code",[s._v("length")]),s._v("属性行为不正常。")]),s._v(" "),n("p",[s._v("下面的例子中，我们想让一个普通对象继承"),n("code",[s._v("Error")]),s._v("对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var e = {};\n\nObject.getOwnPropertyNames(Error.call(e))\n// [ 'stack' ]\n\nObject.getOwnPropertyNames(e)\n// []\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面代码中，我们想通过"),n("code",[s._v("Error.call(e)")]),s._v("这种写法，让普通对象"),n("code",[s._v("e")]),s._v("具有"),n("code",[s._v("Error")]),s._v("对象的实例属性。但是，"),n("code",[s._v("Error.call()")]),s._v("完全忽略传入的第一个参数，而是返回一个新对象，"),n("code",[s._v("e")]),s._v("本身没有任何变化。这证明了"),n("code",[s._v("Error.call(e)")]),s._v("这种写法，无法继承原生构造函数。")]),s._v(" "),n("p",[s._v("ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象"),n("code",[s._v("this")]),s._v("，然后再用子类的构造函数修饰"),n("code",[s._v("this")]),s._v("，使得父类的所有行为都可以继承。下面是一个继承"),n("code",[s._v("Array")]),s._v("的例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\n\narr.length = 0;\narr[0] // undefined\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("上面代码定义了一个"),n("code",[s._v("MyArray")]),s._v("类，继承了"),n("code",[s._v("Array")]),s._v("构造函数，因此就可以从"),n("code",[s._v("MyArray")]),s._v("生成数组的实例。这意味着，ES6 可以自定义原生数据结构（比如"),n("code",[s._v("Array")]),s._v("、"),n("code",[s._v("String")]),s._v("等）的子类，这是 ES5 无法做到的。")]),s._v(" "),n("p",[s._v("上面这个例子也说明，"),n("code",[s._v("extends")]),s._v("关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。下面就是定义了一个带版本功能的数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class VersionedArray extends Array {\n  constructor() {\n    super();\n    this.history = [[]];\n  }\n  commit() {\n    this.history.push(this.slice());\n  }\n  revert() {\n    this.splice(0, this.length, ...this.history[this.history.length - 1]);\n  }\n}\n\nvar x = new VersionedArray();\n\nx.push(1);\nx.push(2);\nx // [1, 2]\nx.history // [[]]\n\nx.commit();\nx.history // [[], [1, 2]]\n\nx.push(3);\nx // [1, 2, 3]\nx.history // [[], [1, 2]]\n\nx.revert();\nx // [1, 2]\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("VersionedArray")]),s._v("会通过"),n("code",[s._v("commit")]),s._v("方法，将自己的当前状态生成一个版本快照，存入"),n("code",[s._v("history")]),s._v("属性。"),n("code",[s._v("revert")]),s._v("方法用来将数组重置为最新一次保存的版本。除此之外，"),n("code",[s._v("VersionedArray")]),s._v("依然是一个普通数组，所有原生的数组方法都可以在它上面调用。")]),s._v(" "),n("p",[s._v("下面是一个自定义"),n("code",[s._v("Error")]),s._v("子类的例子，可以用来定制报错时的行为。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class ExtendableError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.stack = (new Error()).stack;\n    this.name = this.constructor.name;\n  }\n}\n\nclass MyError extends ExtendableError {\n  constructor(m) {\n    super(m);\n  }\n}\n\nvar myerror = new MyError(\'ll\');\nmyerror.message // "ll"\nmyerror instanceof Error // true\nmyerror.name // "MyError"\nmyerror.stack\n// Error\n//     at MyError.ExtendableError\n//     ...\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("注意，继承"),n("code",[s._v("Object")]),s._v("的子类，有一个"),n("a",{attrs:{href:"http://stackoverflow.com/questions/36203614/super-does-not-pass-arguments-when-instantiating-a-class-extended-from-object",target:"_blank",rel:"noopener noreferrer"}},[s._v("行为差异"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class NewObj extends Object{\n  constructor(){\n    super(...arguments);\n  }\n}\nvar o = new NewObj({attr: true});\no.attr === true  // false\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("NewObj")]),s._v("继承了"),n("code",[s._v("Object")]),s._v("，但是无法通过"),n("code",[s._v("super")]),s._v("方法向父类"),n("code",[s._v("Object")]),s._v("传参。这是因为 ES6 改变了"),n("code",[s._v("Object")]),s._v("构造函数的行为，一旦发现"),n("code",[s._v("Object")]),s._v("方法不是通过"),n("code",[s._v("new Object()")]),s._v("这种形式调用，ES6 规定"),n("code",[s._v("Object")]),s._v("构造函数会忽略参数。")]),s._v(" "),n("h2",{attrs:{id:"mixin-模式的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mixin-模式的实现"}},[s._v("#")]),s._v(" Mixin 模式的实现")]),s._v(" "),n("p",[s._v("Mixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口。它的最简单实现如下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const a = {\n  a: 'a'\n};\nconst b = {\n  b: 'b'\n};\nconst c = {...a, ...b}; // {a: 'a', b: 'b'}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("c")]),s._v("对象是"),n("code",[s._v("a")]),s._v("对象和"),n("code",[s._v("b")]),s._v("对象的合成，具有两者的接口。")]),s._v(" "),n("p",[s._v("下面是一个更完备的实现，将多个类的接口“混入”（mix in）另一个类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function mix(...mixins) {\n  class Mix {}\n\n  for (let mixin of mixins) {\n    copyProperties(Mix, mixin); // 拷贝实例属性\n    copyProperties(Mix.prototype, mixin.prototype); // 拷贝原型属性\n  }\n\n  return Mix;\n}\n\nfunction copyProperties(target, source) {\n  for (let key of Reflect.ownKeys(source)) {\n    if ( key !== "constructor"\n      && key !== "prototype"\n      && key !== "name"\n    ) {\n      let desc = Object.getOwnPropertyDescriptor(source, key);\n      Object.defineProperty(target, key, desc);\n    }\n  }\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("上面代码的"),n("code",[s._v("mix")]),s._v("函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class DistributedEdit extends mix(Loggable, Serializable) {\n  // ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);