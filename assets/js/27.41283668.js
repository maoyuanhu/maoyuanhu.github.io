(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{529:function(e,s,t){"use strict";t.r(s);var n=t(1),a=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),s("p",[s("code",[e._v("Reflect")]),e._v("对象与"),s("code",[e._v("Proxy")]),e._v("对象一样，也是 ES6 为了操作对象而提供的新 API。"),s("code",[e._v("Reflect")]),e._v("对象的设计目的有这样几个。")]),e._v(" "),s("p",[e._v("（1） 将"),s("code",[e._v("Object")]),e._v("对象的一些明显属于语言内部的方法（比如"),s("code",[e._v("Object.defineProperty")]),e._v("），放到"),s("code",[e._v("Reflect")]),e._v("对象上。现阶段，某些方法同时在"),s("code",[e._v("Object")]),e._v("和"),s("code",[e._v("Reflect")]),e._v("对象上部署，未来的新方法将只部署在"),s("code",[e._v("Reflect")]),e._v("对象上。也就是说，从"),s("code",[e._v("Reflect")]),e._v("对象上可以拿到语言内部的方法。")]),e._v(" "),s("p",[e._v("（2） 修改某些"),s("code",[e._v("Object")]),e._v("方法的返回结果，让其变得更合理。比如，"),s("code",[e._v("Object.defineProperty(obj, name, desc)")]),e._v("在无法定义属性时，会抛出一个错误，而"),s("code",[e._v("Reflect.defineProperty(obj, name, desc)")]),e._v("则会返回"),s("code",[e._v("false")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("（3） 让"),s("code",[e._v("Object")]),e._v("操作都变成函数行为。某些"),s("code",[e._v("Object")]),e._v("操作是命令式，比如"),s("code",[e._v("name in obj")]),e._v("和"),s("code",[e._v("delete obj[name]")]),e._v("，而"),s("code",[e._v("Reflect.has(obj, name)")]),e._v("和"),s("code",[e._v("Reflect.deleteProperty(obj, name)")]),e._v("让它们变成了函数行为。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 老写法\n'assign' in Object // true\n\n// 新写法\nReflect.has(Object, 'assign') // true\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("（4）"),s("code",[e._v("Reflect")]),e._v("对象的方法与"),s("code",[e._v("Proxy")]),e._v("对象的方法一一对应，只要是"),s("code",[e._v("Proxy")]),e._v("对象的方法，就能在"),s("code",[e._v("Reflect")]),e._v("对象上找到对应的方法。这就让"),s("code",[e._v("Proxy")]),e._v("对象可以方便地调用对应的"),s("code",[e._v("Reflect")]),e._v("方法，完成默认行为，作为修改行为的基础。也就是说，不管"),s("code",[e._v("Proxy")]),e._v("怎么修改默认行为，你总可以在"),s("code",[e._v("Reflect")]),e._v("上获取默认行为。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Proxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target,name, value, receiver);\n    if (success) {\n      log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("上面代码中，"),s("code",[e._v("Proxy")]),e._v("方法拦截"),s("code",[e._v("target")]),e._v("对象的属性赋值行为。它采用"),s("code",[e._v("Reflect.set")]),e._v("方法将值赋值给对象的属性，确保完成原有的行为，然后再部署额外的功能。")]),e._v(" "),s("p",[e._v("下面是另一个例子。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var loggedObj = new Proxy(obj, {\n  get(target, name) {\n    console.log('get', target, name);\n    return Reflect.get(target, name);\n  },\n  deleteProperty(target, name) {\n    console.log('delete' + name);\n    return Reflect.deleteProperty(target, name);\n  },\n  has(target, name) {\n    console.log('has' + name);\n    return Reflect.has(target, name);\n  }\n});\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("上面代码中，每一个"),s("code",[e._v("Proxy")]),e._v("对象的拦截操作（"),s("code",[e._v("get")]),e._v("、"),s("code",[e._v("delete")]),e._v("、"),s("code",[e._v("has")]),e._v("），内部都调用对应的"),s("code",[e._v("Reflect")]),e._v("方法，保证原生行为能够正常执行。添加的工作，就是将每一个操作输出一行日志。")]),e._v(" "),s("p",[e._v("有了"),s("code",[e._v("Reflect")]),e._v("对象以后，很多操作会更易读。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 老写法\nFunction.prototype.apply.call(Math.floor, undefined, [1.75]) // 1\n\n// 新写法\nReflect.apply(Math.floor, undefined, [1.75]) // 1\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h2",{attrs:{id:"静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),s("p",[s("code",[e._v("Reflect")]),e._v("对象一共有13个静态方法。")]),e._v(" "),s("ul",[s("li",[e._v("Reflect.apply(target, thisArg, args)")]),e._v(" "),s("li",[e._v("Reflect.construct(target, args)")]),e._v(" "),s("li",[e._v("Reflect.get(target, name, receiver)")]),e._v(" "),s("li",[e._v("Reflect.set(target, name, value, receiver)")]),e._v(" "),s("li",[e._v("Reflect.defineProperty(target, name, desc)")]),e._v(" "),s("li",[e._v("Reflect.deleteProperty(target, name)")]),e._v(" "),s("li",[e._v("Reflect.has(target, name)")]),e._v(" "),s("li",[e._v("Reflect.ownKeys(target)")]),e._v(" "),s("li",[e._v("Reflect.isExtensible(target)")]),e._v(" "),s("li",[e._v("Reflect.preventExtensions(target)")]),e._v(" "),s("li",[e._v("Reflect.getOwnPropertyDescriptor(target, name)")]),e._v(" "),s("li",[e._v("Reflect.getPrototypeOf(target)")]),e._v(" "),s("li",[e._v("Reflect.setPrototypeOf(target, prototype)")])]),e._v(" "),s("p",[e._v("上面这些方法的作用，大部分与"),s("code",[e._v("Object")]),e._v("对象的同名方法的作用都是相同的，而且它与"),s("code",[e._v("Proxy")]),e._v("对象的方法是一一对应的。下面是对它们的解释。")]),e._v(" "),s("h3",{attrs:{id:"reflect-get-target-name-receiver"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-get-target-name-receiver"}},[e._v("#")]),e._v(" Reflect.get(target, name, receiver)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.get")]),e._v("方法查找并返回"),s("code",[e._v("target")]),e._v("对象的"),s("code",[e._v("name")]),e._v("属性，如果没有该属性，则返回"),s("code",[e._v("undefined")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var myObject = {\n  foo: 1,\n  bar: 2,\n  get baz() {\n    return this.foo + this.bar;\n  },\n}\n\nReflect.get(myObject, 'foo') // 1\nReflect.get(myObject, 'bar') // 2\nReflect.get(myObject, 'baz') // 3\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v("如果"),s("code",[e._v("name")]),e._v("属性部署了读取函数（getter），则读取函数的"),s("code",[e._v("this")]),e._v("绑定"),s("code",[e._v("receiver")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var myObject = {\n  foo: 1,\n  bar: 2,\n  get baz() {\n    return this.foo + this.bar;\n  },\n};\n\nvar myReceiverObject = {\n  foo: 4,\n  bar: 4,\n};\n\nReflect.get(myObject, 'baz', myReceiverObject) // 8\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("如果第一个参数不是对象，"),s("code",[e._v("Reflect.get")]),e._v("方法会报错。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Reflect.get(1, 'foo') // 报错\nReflect.get(false, 'foo') // 报错\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"reflect-set-target-name-value-receiver"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-set-target-name-value-receiver"}},[e._v("#")]),e._v(" Reflect.set(target, name, value, receiver)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.set")]),e._v("方法设置"),s("code",[e._v("target")]),e._v("对象的"),s("code",[e._v("name")]),e._v("属性等于"),s("code",[e._v("value")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var myObject = {\n  foo: 1,\n  set bar(value) {\n    return this.foo = value;\n  },\n}\n\nmyObject.foo // 1\n\nReflect.set(myObject, 'foo', 2);\nmyObject.foo // 2\n\nReflect.set(myObject, 'bar', 3)\nmyObject.foo // 3\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("如果"),s("code",[e._v("name")]),e._v("属性设置了赋值函数，则赋值函数的"),s("code",[e._v("this")]),e._v("绑定"),s("code",[e._v("receiver")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var myObject = {\n  foo: 4,\n  set bar(value) {\n    return this.foo = value;\n  },\n};\n\nvar myReceiverObject = {\n  foo: 0,\n};\n\nReflect.set(myObject, 'bar', 1, myReceiverObject);\nmyObject.foo // 4\nmyReceiverObject.foo // 1\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("注意，如果 Proxy 对象和 Reflect 对象联合使用，前者拦截赋值操作，后者完成赋值的默认行为，而且传入了"),s("code",[e._v("receiver")]),e._v("，那么"),s("code",[e._v("Reflect.set")]),e._v("会触发"),s("code",[e._v("Proxy.defineProperty")]),e._v("拦截。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let p = {\n  a: 'a'\n};\n\nlet handler = {\n  set(target, key, value, receiver) {\n    console.log('set');\n    Reflect.set(target, key, value, receiver)\n  },\n  defineProperty(target, key, attribute) {\n    console.log('defineProperty');\n    Reflect.defineProperty(target, key, attribute);\n  }\n};\n\nlet obj = new Proxy(p, handler);\nobj.a = 'A';\n// set\n// defineProperty\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])]),s("p",[e._v("上面代码中，"),s("code",[e._v("Proxy.set")]),e._v("拦截里面使用了"),s("code",[e._v("Reflect.set")]),e._v("，而且传入了"),s("code",[e._v("receiver")]),e._v("，导致触发"),s("code",[e._v("Proxy.defineProperty")]),e._v("拦截。这是因为"),s("code",[e._v("Proxy.set")]),e._v("的"),s("code",[e._v("receiver")]),e._v("参数总是指向当前的 Proxy 实例（即上例的"),s("code",[e._v("obj")]),e._v("），而"),s("code",[e._v("Reflect.set")]),e._v("一旦传入"),s("code",[e._v("receiver")]),e._v("，就会将属性赋值到"),s("code",[e._v("receiver")]),e._v("上面（即"),s("code",[e._v("obj")]),e._v("），导致触发"),s("code",[e._v("defineProperty")]),e._v("拦截。如果"),s("code",[e._v("Reflect.set")]),e._v("没有传入"),s("code",[e._v("receiver")]),e._v("，那么就不会触发"),s("code",[e._v("defineProperty")]),e._v("拦截。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let p = {\n  a: 'a'\n};\n\nlet handler = {\n  set(target, key, value, receiver) {\n    console.log('set');\n    Reflect.set(target, key, value)\n  },\n  defineProperty(target, key, attribute) {\n    console.log('defineProperty');\n    Reflect.defineProperty(target, key, attribute);\n  }\n};\n\nlet obj = new Proxy(p, handler);\nobj.a = 'A';\n// set\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br")])]),s("p",[e._v("如果第一个参数不是对象，"),s("code",[e._v("Reflect.set")]),e._v("会报错。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Reflect.set(1, 'foo', {}) // 报错\nReflect.set(false, 'foo', {}) // 报错\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"reflect-has-obj-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-has-obj-name"}},[e._v("#")]),e._v(" Reflect.has(obj, name)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.has")]),e._v("方法对应"),s("code",[e._v("name in obj")]),e._v("里面的"),s("code",[e._v("in")]),e._v("运算符。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var myObject = {\n  foo: 1,\n};\n\n// 旧写法\n'foo' in myObject // true\n\n// 新写法\nReflect.has(myObject, 'foo') // true\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("如果第一个参数不是对象，"),s("code",[e._v("Reflect.has")]),e._v("和"),s("code",[e._v("in")]),e._v("运算符都会报错。")]),e._v(" "),s("h3",{attrs:{id:"reflect-deleteproperty-obj-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-deleteproperty-obj-name"}},[e._v("#")]),e._v(" Reflect.deleteProperty(obj, name)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.deleteProperty")]),e._v("方法等同于"),s("code",[e._v("delete obj[name]")]),e._v("，用于删除对象的属性。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const myObj = { foo: 'bar' };\n\n// 旧写法\ndelete myObj.foo;\n\n// 新写法\nReflect.deleteProperty(myObj, 'foo');\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("该方法返回一个布尔值。如果删除成功，或者被删除的属性不存在，返回"),s("code",[e._v("true")]),e._v("；删除失败，被删除的属性依然存在，返回"),s("code",[e._v("false")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"reflect-construct-target-args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-construct-target-args"}},[e._v("#")]),e._v(" Reflect.construct(target, args)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.construct")]),e._v("方法等同于"),s("code",[e._v("new target(...args)")]),e._v("，这提供了一种不使用"),s("code",[e._v("new")]),e._v("，来调用构造函数的方法。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function Greeting(name) {\n  this.name = name;\n}\n\n// new 的写法\nconst instance = new Greeting('张三');\n\n// Reflect.construct 的写法\nconst instance = Reflect.construct(Greeting, ['张三']);\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("h3",{attrs:{id:"reflect-getprototypeof-obj"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-getprototypeof-obj"}},[e._v("#")]),e._v(" Reflect.getPrototypeOf(obj)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.getPrototypeOf")]),e._v("方法用于读取对象的"),s("code",[e._v("__proto__")]),e._v("属性，对应"),s("code",[e._v("Object.getPrototypeOf(obj)")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const myObj = new FancyThing();\n\n// 旧写法\nObject.getPrototypeOf(myObj) === FancyThing.prototype;\n\n// 新写法\nReflect.getPrototypeOf(myObj) === FancyThing.prototype;\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[s("code",[e._v("Reflect.getPrototypeOf")]),e._v("和"),s("code",[e._v("Object.getPrototypeOf")]),e._v("的一个区别是，如果参数不是对象，"),s("code",[e._v("Object.getPrototypeOf")]),e._v("会将这个参数转为对象，然后再运行，而"),s("code",[e._v("Reflect.getPrototypeOf")]),e._v("会报错。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Object.getPrototypeOf(1) // Number {[[PrimitiveValue]]: 0}\nReflect.getPrototypeOf(1) // 报错\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"reflect-setprototypeof-obj-newproto"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-setprototypeof-obj-newproto"}},[e._v("#")]),e._v(" Reflect.setPrototypeOf(obj, newProto)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.setPrototypeOf")]),e._v("方法用于设置对象的"),s("code",[e._v("__proto__")]),e._v("属性，返回第一个参数对象，对应"),s("code",[e._v("Object.setPrototypeOf(obj, newProto)")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const myObj = new FancyThing();\n\n// 旧写法\nObject.setPrototypeOf(myObj, OtherThing.prototype);\n\n// 新写法\nReflect.setPrototypeOf(myObj, OtherThing.prototype);\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("如果第一个参数不是对象，"),s("code",[e._v("Object.setPrototypeOf")]),e._v("会返回第一个参数本身，而"),s("code",[e._v("Reflect.setPrototypeOf")]),e._v("会报错。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Object.setPrototypeOf(1, {})\n// 1\n\nReflect.setPrototypeOf(1, {})\n// TypeError: Reflect.setPrototypeOf called on non-object\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("如果第一个参数是"),s("code",[e._v("undefined")]),e._v("或"),s("code",[e._v("null")]),e._v("，"),s("code",[e._v("Object.setPrototypeOf")]),e._v("和"),s("code",[e._v("Reflect.setPrototypeOf")]),e._v("都会报错。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Object.setPrototypeOf(null, {})\n// TypeError: Object.setPrototypeOf called on null or undefined\n\nReflect.setPrototypeOf(null, {})\n// TypeError: Reflect.setPrototypeOf called on non-object\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h3",{attrs:{id:"reflect-apply-func-thisarg-args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-apply-func-thisarg-args"}},[e._v("#")]),e._v(" Reflect.apply(func, thisArg, args)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.apply")]),e._v("方法等同于"),s("code",[e._v("Function.prototype.apply.call(func, thisArg, args)")]),e._v("，用于绑定"),s("code",[e._v("this")]),e._v("对象后执行给定函数。")]),e._v(" "),s("p",[e._v("一般来说，如果要绑定一个函数的"),s("code",[e._v("this")]),e._v("对象，可以这样写"),s("code",[e._v("fn.apply(obj, args)")]),e._v("，但是如果函数定义了自己的"),s("code",[e._v("apply")]),e._v("方法，就只能写成"),s("code",[e._v("Function.prototype.apply.call(fn, obj, args)")]),e._v("，采用"),s("code",[e._v("Reflect")]),e._v("对象可以简化这种操作。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const ages = [11, 33, 12, 54, 18, 96];\n\n// 旧写法\nconst youngest = Math.min.apply(Math, ages);\nconst oldest = Math.max.apply(Math, ages);\nconst type = Object.prototype.toString.call(youngest);\n\n// 新写法\nconst youngest = Reflect.apply(Math.min, Math, ages);\nconst oldest = Reflect.apply(Math.max, Math, ages);\nconst type = Reflect.apply(Object.prototype.toString, youngest, []);\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("h3",{attrs:{id:"reflect-defineproperty-target-propertykey-attributes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-defineproperty-target-propertykey-attributes"}},[e._v("#")]),e._v(" Reflect.defineProperty(target, propertyKey, attributes)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.defineProperty")]),e._v("方法基本等同于"),s("code",[e._v("Object.defineProperty")]),e._v("，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用"),s("code",[e._v("Reflect.defineProperty")]),e._v("代替它。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function MyDate() {\n  /*…*/\n}\n\n// 旧写法\nObject.defineProperty(MyDate, 'now', {\n  value: () => Date.now()\n});\n\n// 新写法\nReflect.defineProperty(MyDate, 'now', {\n  value: () => Date.now()\n});\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("p",[e._v("如果"),s("code",[e._v("Reflect.defineProperty")]),e._v("的第一个参数不是对象，就会抛出错误，比如"),s("code",[e._v("Reflect.defineProperty(1, 'foo')")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"reflect-getownpropertydescriptor-target-propertykey"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-getownpropertydescriptor-target-propertykey"}},[e._v("#")]),e._v(" Reflect.getOwnPropertyDescriptor(target, propertyKey)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.getOwnPropertyDescriptor")]),e._v("基本等同于"),s("code",[e._v("Object.getOwnPropertyDescriptor")]),e._v("，用于得到指定属性的描述对象，将来会替代掉后者。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var myObject = {};\nObject.defineProperty(myObject, 'hidden', {\n  value: true,\n  enumerable: false,\n});\n\n// 旧写法\nvar theDescriptor = Object.getOwnPropertyDescriptor(myObject, 'hidden');\n\n// 新写法\nvar theDescriptor = Reflect.getOwnPropertyDescriptor(myObject, 'hidden');\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[s("code",[e._v("Reflect.getOwnPropertyDescriptor")]),e._v("和"),s("code",[e._v("Object.getOwnPropertyDescriptor")]),e._v("的一个区别是，如果第一个参数不是对象，"),s("code",[e._v("Object.getOwnPropertyDescriptor(1, 'foo')")]),e._v("不报错，返回"),s("code",[e._v("undefined")]),e._v("，而"),s("code",[e._v("Reflect.getOwnPropertyDescriptor(1, 'foo')")]),e._v("会抛出错误，表示参数非法。")]),e._v(" "),s("h3",{attrs:{id:"reflect-isextensible-target"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-isextensible-target"}},[e._v("#")]),e._v(" Reflect.isExtensible (target)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.isExtensible")]),e._v("方法对应"),s("code",[e._v("Object.isExtensible")]),e._v("，返回一个布尔值，表示当前对象是否可扩展。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const myObject = {};\n\n// 旧写法\nObject.isExtensible(myObject) // true\n\n// 新写法\nReflect.isExtensible(myObject) // true\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("如果参数不是对象，"),s("code",[e._v("Object.isExtensible")]),e._v("会返回"),s("code",[e._v("false")]),e._v("，因为非对象本来就是不可扩展的，而"),s("code",[e._v("Reflect.isExtensible")]),e._v("会报错。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Object.isExtensible(1) // false\nReflect.isExtensible(1) // 报错\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"reflect-preventextensions-target"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-preventextensions-target"}},[e._v("#")]),e._v(" Reflect.preventExtensions(target)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.preventExtensions")]),e._v("对应"),s("code",[e._v("Object.preventExtensions")]),e._v("方法，用于让一个对象变为不可扩展。它返回一个布尔值，表示是否操作成功。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var myObject = {};\n\n// 旧写法\nObject.preventExtensions(myObject) // Object {}\n\n// 新写法\nReflect.preventExtensions(myObject) // true\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("如果参数不是对象，"),s("code",[e._v("Object.preventExtensions")]),e._v("在 ES5 环境报错，在 ES6 环境返回传入的参数，而"),s("code",[e._v("Reflect.preventExtensions")]),e._v("会报错。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// ES5 环境\nObject.preventExtensions(1) // 报错\n\n// ES6 环境\nObject.preventExtensions(1) // 1\n\n// 新写法\nReflect.preventExtensions(1) // 报错\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("h3",{attrs:{id:"reflect-ownkeys-target"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-ownkeys-target"}},[e._v("#")]),e._v(" Reflect.ownKeys (target)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.ownKeys")]),e._v("方法用于返回对象的所有属性，基本等同于"),s("code",[e._v("Object.getOwnPropertyNames")]),e._v("与"),s("code",[e._v("Object.getOwnPropertySymbols")]),e._v("之和。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var myObject = {\n  foo: 1,\n  bar: 2,\n  [Symbol.for('baz')]: 3,\n  [Symbol.for('bing')]: 4,\n};\n\n// 旧写法\nObject.getOwnPropertyNames(myObject)\n// ['foo', 'bar']\n\nObject.getOwnPropertySymbols(myObject)\n//[Symbol(baz), Symbol(bing)]\n\n// 新写法\nReflect.ownKeys(myObject)\n// ['foo', 'bar', Symbol(baz), Symbol(bing)]\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("h2",{attrs:{id:"实例-使用-proxy-实现观察者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例-使用-proxy-实现观察者模式"}},[e._v("#")]),e._v(" 实例：使用 Proxy 实现观察者模式")]),e._v(" "),s("p",[e._v("观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const person = observable({\n  name: '张三',\n  age: 20\n});\n\nfunction print() {\n  console.log(`${person.name}, ${person.age}`)\n}\n\nobserve(print);\nperson.name = '李四';\n// 输出\n// 李四, 20\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("p",[e._v("上面代码中，数据对象"),s("code",[e._v("person")]),e._v("是观察目标，函数"),s("code",[e._v("print")]),e._v("是观察者。一旦数据对象发生变化，"),s("code",[e._v("print")]),e._v("就会自动执行。")]),e._v(" "),s("p",[e._v("下面，使用 Proxy 写一个观察者模式的最简单实现，即实现"),s("code",[e._v("observable")]),e._v("和"),s("code",[e._v("observe")]),e._v("这两个函数。思路是"),s("code",[e._v("observable")]),e._v("函数返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const queuedObservers = new Set();\n\nconst observe = fn => queuedObservers.add(fn);\nconst observable = obj => new Proxy(obj, {set});\n\nfunction set(target, key, value, receiver) {\n  const result = Reflect.set(target, key, value, receiver);\n  queuedObservers.forEach(observer => observer());\n  return result;\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("上面代码中，先定义了一个"),s("code",[e._v("Set")]),e._v("集合，所有观察者函数都放进这个集合。然后，"),s("code",[e._v("observable")]),e._v("函数返回原始对象的代理，拦截赋值操作。拦截函数"),s("code",[e._v("set")]),e._v("之中，会自动执行所有观察者。")])])}),[],!1,null,null,null);s.default=a.exports}}]);