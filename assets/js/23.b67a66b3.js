(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{528:function(n,e,s){"use strict";s.r(e);var a=s(1),t=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[n._v("#")]),n._v(" 简介")]),n._v(" "),e("h3",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[n._v("#")]),n._v(" 基本概念")]),n._v(" "),e("p",[n._v("Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。")]),n._v(" "),e("p",[n._v("Generator 函数有多种理解角度。从语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。")]),n._v(" "),e("p",[n._v("执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。")]),n._v(" "),e("p",[n._v("形式上，Generator 函数是一个普通函数，但是有两个特征。一是，"),e("code",[n._v("function")]),n._v("关键字与函数名之间有一个星号；二是，函数体内部使用"),e("code",[n._v("yield")]),n._v("表达式，定义不同的内部状态（"),e("code",[n._v("yield")]),n._v("在英语里的意思就是“产出”）。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("上面代码定义了一个 Generator 函数"),e("code",[n._v("helloWorldGenerator")]),n._v("，它内部有两个"),e("code",[n._v("yield")]),n._v("表达式（"),e("code",[n._v("hello")]),n._v("和"),e("code",[n._v("world")]),n._v("），即该函数有三个状态：hello，world 和 return 语句（结束执行）。")]),n._v(" "),e("p",[n._v("然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。")]),n._v(" "),e("p",[n._v("下一步，必须调用遍历器对象的"),e("code",[n._v("next")]),n._v("方法，使得指针移向下一个状态。也就是说，每次调用"),e("code",[n._v("next")]),n._v("方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个"),e("code",[n._v("yield")]),n._v("表达式（或"),e("code",[n._v("return")]),n._v("语句）为止。换言之，Generator 函数是分段执行的，"),e("code",[n._v("yield")]),n._v("表达式是暂停执行的标记，而"),e("code",[n._v("next")]),n._v("方法可以恢复执行。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("hw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("p",[n._v("上面代码一共调用了四次"),e("code",[n._v("next")]),n._v("方法。")]),n._v(" "),e("p",[n._v("第一次调用，Generator 函数开始执行，直到遇到第一个"),e("code",[n._v("yield")]),n._v("表达式为止。"),e("code",[n._v("next")]),n._v("方法返回一个对象，它的"),e("code",[n._v("value")]),n._v("属性就是当前"),e("code",[n._v("yield")]),n._v("表达式的值"),e("code",[n._v("hello")]),n._v("，"),e("code",[n._v("done")]),n._v("属性的值"),e("code",[n._v("false")]),n._v("，表示遍历还没有结束。")]),n._v(" "),e("p",[n._v("第二次调用，Generator 函数从上次"),e("code",[n._v("yield")]),n._v("表达式停下的地方，一直执行到下一个"),e("code",[n._v("yield")]),n._v("表达式。"),e("code",[n._v("next")]),n._v("方法返回的对象的"),e("code",[n._v("value")]),n._v("属性就是当前"),e("code",[n._v("yield")]),n._v("表达式的值"),e("code",[n._v("world")]),n._v("，"),e("code",[n._v("done")]),n._v("属性的值"),e("code",[n._v("false")]),n._v("，表示遍历还没有结束。")]),n._v(" "),e("p",[n._v("第三次调用，Generator 函数从上次"),e("code",[n._v("yield")]),n._v("表达式停下的地方，一直执行到"),e("code",[n._v("return")]),n._v("语句（如果没有"),e("code",[n._v("return")]),n._v("语句，就执行到函数结束）。"),e("code",[n._v("next")]),n._v("方法返回的对象的"),e("code",[n._v("value")]),n._v("属性，就是紧跟在"),e("code",[n._v("return")]),n._v("语句后面的表达式的值（如果没有"),e("code",[n._v("return")]),n._v("语句，则"),e("code",[n._v("value")]),n._v("属性的值为"),e("code",[n._v("undefined")]),n._v("），"),e("code",[n._v("done")]),n._v("属性的值"),e("code",[n._v("true")]),n._v("，表示遍历已经结束。")]),n._v(" "),e("p",[n._v("第四次调用，此时 Generator 函数已经运行完毕，"),e("code",[n._v("next")]),n._v("方法返回对象的"),e("code",[n._v("value")]),n._v("属性为"),e("code",[n._v("undefined")]),n._v("，"),e("code",[n._v("done")]),n._v("属性为"),e("code",[n._v("true")]),n._v("。以后再调用"),e("code",[n._v("next")]),n._v("方法，返回的都是这个值。")]),n._v(" "),e("p",[n._v("总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的"),e("code",[n._v("next")]),n._v("方法，就会返回一个有着"),e("code",[n._v("value")]),n._v("和"),e("code",[n._v("done")]),n._v("两个属性的对象。"),e("code",[n._v("value")]),n._v("属性表示当前的内部状态的值，是"),e("code",[n._v("yield")]),n._v("表达式后面那个表达式的值；"),e("code",[n._v("done")]),n._v("属性是一个布尔值，表示是否遍历结束。")]),n._v(" "),e("p",[n._v("ES6 没有规定，"),e("code",[n._v("function")]),n._v("关键字与函数名之间的星号，写在哪个位置。这导致下面的写法都能通过。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function * foo(x, y) { ··· }\nfunction *foo(x, y) { ··· }\nfunction* foo(x, y) { ··· }\nfunction*foo(x, y) { ··· }\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("由于 Generator 函数仍然是普通函数，所以一般的写法是上面的第三种，即星号紧跟在"),e("code",[n._v("function")]),n._v("关键字后面。本书也采用这种写法。")]),n._v(" "),e("h3",{attrs:{id:"yield-表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yield-表达式"}},[n._v("#")]),n._v(" yield 表达式")]),n._v(" "),e("p",[n._v("由于 Generator 函数返回的遍历器对象，只有调用"),e("code",[n._v("next")]),n._v("方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。"),e("code",[n._v("yield")]),n._v("表达式就是暂停标志。")]),n._v(" "),e("p",[n._v("遍历器对象的"),e("code",[n._v("next")]),n._v("方法的运行逻辑如下。")]),n._v(" "),e("p",[n._v("（1）遇到"),e("code",[n._v("yield")]),n._v("表达式，就暂停执行后面的操作，并将紧跟在"),e("code",[n._v("yield")]),n._v("后面的那个表达式的值，作为返回的对象的"),e("code",[n._v("value")]),n._v("属性值。")]),n._v(" "),e("p",[n._v("（2）下一次调用"),e("code",[n._v("next")]),n._v("方法时，再继续往下执行，直到遇到下一个"),e("code",[n._v("yield")]),n._v("表达式。")]),n._v(" "),e("p",[n._v("（3）如果没有再遇到新的"),e("code",[n._v("yield")]),n._v("表达式，就一直运行到函数结束，直到"),e("code",[n._v("return")]),n._v("语句为止，并将"),e("code",[n._v("return")]),n._v("语句后面的表达式的值，作为返回的对象的"),e("code",[n._v("value")]),n._v("属性值。")]),n._v(" "),e("p",[n._v("（4）如果该函数没有"),e("code",[n._v("return")]),n._v("语句，则返回的对象的"),e("code",[n._v("value")]),n._v("属性值为"),e("code",[n._v("undefined")]),n._v("。")]),n._v(" "),e("p",[n._v("需要注意的是，"),e("code",[n._v("yield")]),n._v("表达式后面的表达式，只有当调用"),e("code",[n._v("next")]),n._v("方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* gen() {\n  yield  123 + 456;\n}\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("上面代码中，"),e("code",[n._v("yield")]),n._v("后面的表达式"),e("code",[n._v("123 + 456")]),n._v("，不会立即求值，只会在"),e("code",[n._v("next")]),n._v("方法将指针移到这一句时，才会求值。")]),n._v(" "),e("p",[e("code",[n._v("yield")]),n._v("表达式与"),e("code",[n._v("return")]),n._v("语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到"),e("code",[n._v("yield")]),n._v("，函数暂停执行，下一次再从该位置继续向后执行，而"),e("code",[n._v("return")]),n._v("语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）"),e("code",[n._v("return")]),n._v("语句，但是可以执行多次（或者说多个）"),e("code",[n._v("yield")]),n._v("表达式。正常函数只能返回一个值，因为只能执行一次"),e("code",[n._v("return")]),n._v("；Generator 函数可以返回一系列的值，因为可以有任意多个"),e("code",[n._v("yield")]),n._v("。从另一个角度看，也可以说 Generator 生成了一系列的值，这也就是它的名称的来历（英语中，generator 这个词是“生成器”的意思）。")]),n._v(" "),e("p",[n._v("Generator 函数可以不用"),e("code",[n._v("yield")]),n._v("表达式，这时就变成了一个单纯的暂缓执行函数。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* f() {\n  console.log('执行了！')\n}\n\nvar generator = f();\n\nsetTimeout(function () {\n  generator.next()\n}, 2000);\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("p",[n._v("上面代码中，函数"),e("code",[n._v("f")]),n._v("如果是普通函数，在为变量"),e("code",[n._v("generator")]),n._v("赋值时就会执行。但是，函数"),e("code",[n._v("f")]),n._v("是一个 Generator 函数，就变成只有调用"),e("code",[n._v("next")]),n._v("方法时，函数"),e("code",[n._v("f")]),n._v("才会执行。")]),n._v(" "),e("p",[n._v("另外需要注意，"),e("code",[n._v("yield")]),n._v("表达式只能用在 Generator 函数里面，用在其他地方都会报错。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("(function (){\n  yield 1;\n})()\n// SyntaxError: Unexpected number\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("上面代码在一个普通函数中使用"),e("code",[n._v("yield")]),n._v("表达式，结果产生一个句法错误。")]),n._v(" "),e("p",[n._v("下面是另外一个例子。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var arr = [1, [[2, 3], 4], [5, 6]];\n\nvar flat = function* (a) {\n  a.forEach(function (item) {\n    if (typeof item !== 'number') {\n      yield* flat(item);\n    } else {\n      yield item;\n    }\n  });\n};\n\nfor (var f of flat(arr)){\n  console.log(f);\n}\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("上面代码也会产生句法错误，因为"),e("code",[n._v("forEach")]),n._v("方法的参数是一个普通函数，但是在里面使用了"),e("code",[n._v("yield")]),n._v("表达式（这个函数里面还使用了"),e("code",[n._v("yield*")]),n._v("表达式，详细介绍见后文）。一种修改方法是改用"),e("code",[n._v("for")]),n._v("循环。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var arr = [1, [[2, 3], 4], [5, 6]];\n\nvar flat = function* (a) {\n  var length = a.length;\n  for (var i = 0; i < length; i++) {\n    var item = a[i];\n    if (typeof item !== 'number') {\n      yield* flat(item);\n    } else {\n      yield item;\n    }\n  }\n};\n\nfor (var f of flat(arr)) {\n  console.log(f);\n}\n// 1, 2, 3, 4, 5, 6\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br")])]),e("p",[n._v("另外，"),e("code",[n._v("yield")]),n._v("表达式如果用在另一个表达式之中，必须放在圆括号里面。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* demo() {\n  console.log('Hello' + yield); // SyntaxError\n  console.log('Hello' + yield 123); // SyntaxError\n\n  console.log('Hello' + (yield)); // OK\n  console.log('Hello' + (yield 123)); // OK\n}\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[e("code",[n._v("yield")]),n._v("表达式用作函数参数或放在赋值表达式的右边，可以不加括号。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* demo() {\n  foo(yield 'a', yield 'b'); // OK\n  let input = yield; // OK\n}\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("h3",{attrs:{id:"与-iterator-接口的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与-iterator-接口的关系"}},[n._v("#")]),n._v(" 与 Iterator 接口的关系")]),n._v(" "),e("p",[n._v("上一章说过，任意一个对象的"),e("code",[n._v("Symbol.iterator")]),n._v("方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。")]),n._v(" "),e("p",[n._v("由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的"),e("code",[n._v("Symbol.iterator")]),n._v("属性，从而使得该对象具有 Iterator 接口。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("上面代码中，Generator 函数赋值给"),e("code",[n._v("Symbol.iterator")]),n._v("属性，从而使得"),e("code",[n._v("myIterable")]),n._v("对象具有了 Iterator 接口，可以被"),e("code",[n._v("...")]),n._v("运算符遍历了。")]),n._v(" "),e("p",[n._v("Generator 函数执行后，返回一个遍历器对象。该对象本身也具有"),e("code",[n._v("Symbol.iterator")]),n._v("属性，执行后返回自身。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* gen(){\n  // some code\n}\n\nvar g = gen();\n\ng[Symbol.iterator]() === g\n// true\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("上面代码中，"),e("code",[n._v("gen")]),n._v("是一个 Generator 函数，调用它会生成一个遍历器对象"),e("code",[n._v("g")]),n._v("。它的"),e("code",[n._v("Symbol.iterator")]),n._v("属性，也是一个遍历器对象生成函数，执行后返回它自己。")]),n._v(" "),e("h2",{attrs:{id:"next-方法的参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#next-方法的参数"}},[n._v("#")]),n._v(" next 方法的参数")]),n._v(" "),e("p",[e("code",[n._v("yield")]),n._v("表达式本身没有返回值，或者说总是返回"),e("code",[n._v("undefined")]),n._v("。"),e("code",[n._v("next")]),n._v("方法可以带一个参数，该参数就会被当作上一个"),e("code",[n._v("yield")]),n._v("表达式的返回值。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* f() {\n  for(var i = 0; true; i++) {\n    var reset = yield i;\n    if(reset) { i = -1; }\n  }\n}\n\nvar g = f();\n\ng.next() // { value: 0, done: false }\ng.next() // { value: 1, done: false }\ng.next(true) // { value: 0, done: false }\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("p",[n._v("上面代码先定义了一个可以无限运行的 Generator 函数"),e("code",[n._v("f")]),n._v("，如果"),e("code",[n._v("next")]),n._v("方法没有参数，每次运行到"),e("code",[n._v("yield")]),n._v("表达式，变量"),e("code",[n._v("reset")]),n._v("的值总是"),e("code",[n._v("undefined")]),n._v("。当"),e("code",[n._v("next")]),n._v("方法带一个参数"),e("code",[n._v("true")]),n._v("时，变量"),e("code",[n._v("reset")]),n._v("就被重置为这个参数（即"),e("code",[n._v("true")]),n._v("），因此"),e("code",[n._v("i")]),n._v("会等于"),e("code",[n._v("-1")]),n._v("，下一轮循环就会从"),e("code",[n._v("-1")]),n._v("开始递增。")]),n._v(" "),e("p",[n._v("这个功能有很重要的语法意义。Generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的。通过"),e("code",[n._v("next")]),n._v("方法的参数，就有办法在 Generator 函数开始运行之后，继续向函数体内部注入值。也就是说，可以在 Generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。")]),n._v(" "),e("p",[n._v("再看一个例子。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* foo(x) {\n  var y = 2 * (yield (x + 1));\n  var z = yield (y / 3);\n  return (x + y + z);\n}\n\nvar a = foo(5);\na.next() // Object{value:6, done:false}\na.next() // Object{value:NaN, done:false}\na.next() // Object{value:NaN, done:true}\n\nvar b = foo(5);\nb.next() // { value:6, done:false }\nb.next(12) // { value:8, done:false }\nb.next(13) // { value:42, done:true }\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("上面代码中，第二次运行"),e("code",[n._v("next")]),n._v("方法的时候不带参数，导致y的值等于"),e("code",[n._v("2 * undefined")]),n._v("（即"),e("code",[n._v("NaN")]),n._v("），除以3以后还是"),e("code",[n._v("NaN")]),n._v("，因此返回对象的"),e("code",[n._v("value")]),n._v("属性也等于"),e("code",[n._v("NaN")]),n._v("。第三次运行"),e("code",[n._v("Next")]),n._v("方法的时候不带参数，所以"),e("code",[n._v("z")]),n._v("等于"),e("code",[n._v("undefined")]),n._v("，返回对象的"),e("code",[n._v("value")]),n._v("属性等于"),e("code",[n._v("5 + NaN + undefined")]),n._v("，即"),e("code",[n._v("NaN")]),n._v("。")]),n._v(" "),e("p",[n._v("如果向"),e("code",[n._v("next")]),n._v("方法提供参数，返回结果就完全不一样了。上面代码第一次调用"),e("code",[n._v("b")]),n._v("的"),e("code",[n._v("next")]),n._v("方法时，返回"),e("code",[n._v("x+1")]),n._v("的值"),e("code",[n._v("6")]),n._v("；第二次调用"),e("code",[n._v("next")]),n._v("方法，将上一次"),e("code",[n._v("yield")]),n._v("表达式的值设为"),e("code",[n._v("12")]),n._v("，因此"),e("code",[n._v("y")]),n._v("等于"),e("code",[n._v("24")]),n._v("，返回"),e("code",[n._v("y / 3")]),n._v("的值"),e("code",[n._v("8")]),n._v("；第三次调用"),e("code",[n._v("next")]),n._v("方法，将上一次"),e("code",[n._v("yield")]),n._v("表达式的值设为"),e("code",[n._v("13")]),n._v("，因此"),e("code",[n._v("z")]),n._v("等于"),e("code",[n._v("13")]),n._v("，这时"),e("code",[n._v("x")]),n._v("等于"),e("code",[n._v("5")]),n._v("，"),e("code",[n._v("y")]),n._v("等于"),e("code",[n._v("24")]),n._v("，所以"),e("code",[n._v("return")]),n._v("语句的值等于"),e("code",[n._v("42")]),n._v("。")]),n._v(" "),e("p",[n._v("注意，由于"),e("code",[n._v("next")]),n._v("方法的参数表示上一个"),e("code",[n._v("yield")]),n._v("表达式的返回值，所以在第一次使用"),e("code",[n._v("next")]),n._v("方法时，传递参数是无效的。V8 引擎直接忽略第一次使用"),e("code",[n._v("next")]),n._v("方法时的参数，只有从第二次使用"),e("code",[n._v("next")]),n._v("方法开始，参数才是有效的。从语义上讲，第一个"),e("code",[n._v("next")]),n._v("方法用来启动遍历器对象，所以不用带有参数。")]),n._v(" "),e("p",[n._v("再看一个通过"),e("code",[n._v("next")]),n._v("方法的参数，向 Generator 函数内部输入值的例子。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* dataConsumer() {\n  console.log('Started');\n  console.log(`1. ${yield}`);\n  console.log(`2. ${yield}`);\n  return 'result';\n}\n\nlet genObj = dataConsumer();\ngenObj.next();\n// Started\ngenObj.next('a')\n// 1. a\ngenObj.next('b')\n// 2. b\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[n._v("上面代码是一个很直观的例子，每次通过"),e("code",[n._v("next")]),n._v("方法向 Generator 函数输入值，然后打印出来。")]),n._v(" "),e("h2",{attrs:{id:"for-of-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-of-循环"}},[n._v("#")]),n._v(" for...of 循环")]),n._v(" "),e("p",[e("code",[n._v("for...of")]),n._v("循环可以自动遍历 Generator 函数时生成的"),e("code",[n._v("Iterator")]),n._v("对象，且此时不再需要调用"),e("code",[n._v("next")]),n._v("方法。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function *foo() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n  return 6;\n}\n\nfor (let v of foo()) {\n  console.log(v);\n}\n// 1 2 3 4 5\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br")])]),e("p",[n._v("上面代码使用"),e("code",[n._v("for...of")]),n._v("循环，依次显示5个"),e("code",[n._v("yield")]),n._v("表达式的值。这里需要注意，一旦"),e("code",[n._v("next")]),n._v("方法的返回对象的"),e("code",[n._v("done")]),n._v("属性为"),e("code",[n._v("true")]),n._v("，"),e("code",[n._v("for...of")]),n._v("循环就会中止，且不包含该返回对象，所以上面代码的"),e("code",[n._v("return")]),n._v("语句返回的"),e("code",[n._v("6")]),n._v("，不包括在"),e("code",[n._v("for...of")]),n._v("循环之中。")]),n._v(" "),e("p",[n._v("下面是一个利用 Generator 函数和"),e("code",[n._v("for...of")]),n._v("循环，实现斐波那契数列的例子。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* fibonacci() {\n  let [prev, curr] = [0, 1];\n  for (;;) {\n    [prev, curr] = [curr, prev + curr];\n    yield curr;\n  }\n}\n\nfor (let n of fibonacci()) {\n  if (n > 1000) break;\n  console.log(n);\n}\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("p",[n._v("从上面代码可见，使用"),e("code",[n._v("for...of")]),n._v("语句时不需要使用"),e("code",[n._v("next")]),n._v("方法。")]),n._v(" "),e("p",[n._v("利用"),e("code",[n._v("for...of")]),n._v("循环，可以写出遍历任意对象（object）的方法。原生的 JavaScript 对象没有遍历接口，无法使用"),e("code",[n._v("for...of")]),n._v("循环，通过 Generator 函数为它加上这个接口，就可以用了。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* objectEntries(obj) {\n  let propKeys = Reflect.ownKeys(obj);\n\n  for (let propKey of propKeys) {\n    yield [propKey, obj[propKey]];\n  }\n}\n\nlet jane = { first: 'Jane', last: 'Doe' };\n\nfor (let [key, value] of objectEntries(jane)) {\n  console.log(`${key}: ${value}`);\n}\n// first: Jane\n// last: Doe\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("上面代码中，对象"),e("code",[n._v("jane")]),n._v("原生不具备 Iterator 接口，无法用"),e("code",[n._v("for...of")]),n._v("遍历。这时，我们通过 Generator 函数"),e("code",[n._v("objectEntries")]),n._v("为它加上遍历器接口，就可以用"),e("code",[n._v("for...of")]),n._v("遍历了。加上遍历器接口的另一种写法是，将 Generator 函数加到对象的"),e("code",[n._v("Symbol.iterator")]),n._v("属性上面。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* objectEntries() {\n  let propKeys = Object.keys(this);\n\n  for (let propKey of propKeys) {\n    yield [propKey, this[propKey]];\n  }\n}\n\nlet jane = { first: 'Jane', last: 'Doe' };\n\njane[Symbol.iterator] = objectEntries;\n\nfor (let [key, value] of jane) {\n  console.log(`${key}: ${value}`);\n}\n// first: Jane\n// last: Doe\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br")])]),e("p",[n._v("除了"),e("code",[n._v("for...of")]),n._v("循环以外，扩展运算符（"),e("code",[n._v("...")]),n._v("）、解构赋值和"),e("code",[n._v("Array.from")]),n._v("方法内部调用的，都是遍历器接口。这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* numbers () {\n  yield 1\n  yield 2\n  return 3\n  yield 4\n}\n\n// 扩展运算符\n[...numbers()] // [1, 2]\n\n// Array.from 方法\nArray.from(numbers()) // [1, 2]\n\n// 解构赋值\nlet [x, y] = numbers();\nx // 1\ny // 2\n\n// for...of 循环\nfor (let n of numbers()) {\n  console.log(n)\n}\n// 1\n// 2\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br")])]),e("h2",{attrs:{id:"generator-prototype-return"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-prototype-return"}},[n._v("#")]),n._v(" Generator.prototype.return()")]),n._v(" "),e("p",[n._v("Generator 函数返回的遍历器对象，还有一个"),e("code",[n._v("return")]),n._v("方法，可以返回给定的值，并且终结遍历 Generator 函数。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("p",[n._v("上面代码中，遍历器对象"),e("code",[n._v("g")]),n._v("调用"),e("code",[n._v("return")]),n._v("方法后，返回值的"),e("code",[n._v("value")]),n._v("属性就是"),e("code",[n._v("return")]),n._v("方法的参数"),e("code",[n._v("foo")]),n._v("。并且，Generator函数的遍历就终止了，返回值的"),e("code",[n._v("done")]),n._v("属性为"),e("code",[n._v("true")]),n._v("，以后再调用"),e("code",[n._v("next")]),n._v("方法，"),e("code",[n._v("done")]),n._v("属性总是返回"),e("code",[n._v("true")]),n._v("。")]),n._v(" "),e("p",[n._v("如果"),e("code",[n._v("return")]),n._v("方法调用时，不提供参数，则返回值的"),e("code",[n._v("value")]),n._v("属性为"),e("code",[n._v("undefined")]),n._v("。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return() // { value: undefined, done: true }\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("如果 Generator 函数内部有"),e("code",[n._v("try...finally")]),n._v("代码块，那么"),e("code",[n._v("return")]),n._v("方法会推迟到"),e("code",[n._v("finally")]),n._v("代码块执行完再执行。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* numbers () {\n  yield 1;\n  try {\n    yield 2;\n    yield 3;\n  } finally {\n    yield 4;\n    yield 5;\n  }\n  yield 6;\n}\nvar g = numbers();\ng.next() // { value: 1, done: false }\ng.next() // { value: 2, done: false }\ng.return(7) // { value: 4, done: false }\ng.next() // { value: 5, done: false }\ng.next() // { value: 7, done: true }\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br")])]),e("p",[n._v("上面代码中，调用"),e("code",[n._v("return")]),n._v("方法后，就开始执行"),e("code",[n._v("finally")]),n._v("代码块，然后等到"),e("code",[n._v("finally")]),n._v("代码块执行完，再执行"),e("code",[n._v("return")]),n._v("方法。")]),n._v(" "),e("h2",{attrs:{id:"next-、return-的共同点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#next-、return-的共同点"}},[n._v("#")]),n._v(" next()、return() 的共同点")]),n._v(" "),e("p",[e("code",[n._v("next()")]),n._v("、"),e("code",[n._v("return()")]),n._v("这两个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换"),e("code",[n._v("yield")]),n._v("表达式。")]),n._v(" "),e("p",[e("code",[n._v("next()")]),n._v("是将"),e("code",[n._v("yield")]),n._v("表达式替换成一个值。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const g = function* (x, y) {\n  let result = yield x + y;\n  return result;\n};\n\nconst gen = g(1, 2);\ngen.next(); // Object {value: 3, done: false}\n\ngen.next(1); // Object {value: 1, done: true}\n// 相当于将 let result = yield x + y\n// 替换成 let result = 1;\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("p",[n._v("上面代码中，第二个"),e("code",[n._v("next(1)")]),n._v("方法就相当于将"),e("code",[n._v("yield")]),n._v("表达式替换成一个值"),e("code",[n._v("1")]),n._v("。如果"),e("code",[n._v("next")]),n._v("方法没有参数，就相当于替换成"),e("code",[n._v("undefined")]),n._v("。")]),n._v(" "),e("p",[e("code",[n._v("return()")]),n._v("是将"),e("code",[n._v("yield")]),n._v("表达式替换成一个"),e("code",[n._v("return")]),n._v("语句。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("gen.return(2); // Object {value: 2, done: true}\n// 相当于将 let result = yield x + y\n// 替换成 let result = return 2;\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("h2",{attrs:{id:"yield-表达式-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yield-表达式-2"}},[n._v("#")]),n._v(" yield* 表达式")]),n._v(" "),e("p",[n._v("如果在 Generator 函数内部，调用另一个 Generator 函数，默认情况下是没有效果的。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* foo() {\n  yield 'a';\n  yield 'b';\n}\n\nfunction* bar() {\n  yield 'x';\n  foo();\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"y\"\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("p",[n._v("上面代码中，"),e("code",[n._v("foo")]),n._v("和"),e("code",[n._v("bar")]),n._v("都是 Generator 函数，在"),e("code",[n._v("bar")]),n._v("里面调用"),e("code",[n._v("foo")]),n._v("，是不会有效果的。")]),n._v(" "),e("p",[n._v("这个就需要用到"),e("code",[n._v("yield*")]),n._v("表达式，用来在一个 Generator 函数里面执行另一个 Generator 函数。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br")])]),e("p",[n._v("再来看一个对比的例子。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* inner() {\n  yield 'hello!';\n}\n\nfunction* outer1() {\n  yield 'open';\n  yield inner();\n  yield 'close';\n}\n\nvar gen = outer1()\ngen.next().value // \"open\"\ngen.next().value // 返回一个遍历器对象\ngen.next().value // \"close\"\n\nfunction* outer2() {\n  yield 'open'\n  yield* inner()\n  yield 'close'\n}\n\nvar gen = outer2()\ngen.next().value // \"open\"\ngen.next().value // \"hello!\"\ngen.next().value // \"close\"\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br")])]),e("p",[n._v("上面例子中，"),e("code",[n._v("outer2")]),n._v("使用了"),e("code",[n._v("yield*")]),n._v("，"),e("code",[n._v("outer1")]),n._v("没使用。结果就是，"),e("code",[n._v("outer1")]),n._v("返回一个遍历器对象，"),e("code",[n._v("outer2")]),n._v("返回该遍历器对象的内部值。")]),n._v(" "),e("p",[n._v("从语法角度看，如果"),e("code",[n._v("yield")]),n._v("表达式后面跟的是一个遍历器对象，需要在"),e("code",[n._v("yield")]),n._v("表达式后面加上星号，表明它返回的是一个遍历器对象。这被称为"),e("code",[n._v("yield*")]),n._v("表达式。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let delegatedIterator = (function* () {\n  yield 'Hello!';\n  yield 'Bye!';\n}());\n\nlet delegatingIterator = (function* () {\n  yield 'Greetings!';\n  yield* delegatedIterator;\n  yield 'Ok, bye.';\n}());\n\nfor(let value of delegatingIterator) {\n  console.log(value);\n}\n// \"Greetings!\n// \"Hello!\"\n// \"Bye!\"\n// \"Ok, bye.\"\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br")])]),e("p",[n._v("上面代码中，"),e("code",[n._v("delegatingIterator")]),n._v("是代理者，"),e("code",[n._v("delegatedIterator")]),n._v("是被代理者。由于"),e("code",[n._v("yield* delegatedIterator")]),n._v("语句得到的值，是一个遍历器，所以要用星号表示。运行结果就是使用一个遍历器，遍历了多个Generator函数，有递归的效果。")]),n._v(" "),e("p",[n._v("如果"),e("code",[n._v("yield*")]),n._v("后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('function* gen(){\n  yield* ["a", "b", "c"];\n}\n\ngen().next() // { value:"a", done:false }\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("上面代码中，"),e("code",[n._v("yield")]),n._v("命令后面如果不加星号，返回的是整个数组，加了星号就表示返回的是数组的遍历器对象。")]),n._v(" "),e("p",[n._v("实际上，任何数据结构只要有 Iterator 接口，就可以被"),e("code",[n._v("yield*")]),n._v("遍历。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let read = (function* () {\n  yield 'hello';\n  yield* 'hello';\n})();\n\nread.next().value // \"hello\"\nread.next().value // \"h\"\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("上面代码中，"),e("code",[n._v("yield")]),n._v("表达式返回整个字符串，"),e("code",[n._v("yield*")]),n._v("语句返回单个字符。因为字符串具有 Iterator 接口，所以被"),e("code",[n._v("yield*")]),n._v("遍历。")]),n._v(" "),e("p",[n._v("如果被代理的 Generator 函数有"),e("code",[n._v("return")]),n._v("语句，那么就可以向代理它的 Generator 函数返回数据。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('function *foo() {\n  yield 2;\n  yield 3;\n  return "foo";\n}\n\nfunction *bar() {\n  yield 1;\n  var v = yield *foo();\n  console.log( "v: " + v );\n  yield 4;\n}\n\nvar it = bar();\n\nit.next()\n// {value: 1, done: false}\nit.next()\n// {value: 2, done: false}\nit.next()\n// {value: 3, done: false}\nit.next();\n// "v: foo"\n// {value: 4, done: false}\nit.next()\n// {value: undefined, done: true}\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br")])]),e("p",[n._v("上面代码在第四次调用"),e("code",[n._v("next")]),n._v("方法的时候，屏幕上会有输出，这是因为函数"),e("code",[n._v("foo")]),n._v("的"),e("code",[n._v("return")]),n._v("语句，向函数"),e("code",[n._v("bar")]),n._v("提供了返回值。")]),n._v(" "),e("h2",{attrs:{id:"作为对象属性的generator函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作为对象属性的generator函数"}},[n._v("#")]),n._v(" 作为对象属性的Generator函数")]),n._v(" "),e("p",[n._v("如果一个对象的属性是 Generator 函数，可以简写成下面的形式。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let obj = {\n  * myGeneratorMethod() {\n    ···\n  }\n};\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("上面代码中，"),e("code",[n._v("myGeneratorMethod")]),n._v("属性前面有一个星号，表示这个属性是一个 Generator 函数。")]),n._v(" "),e("p",[n._v("它的完整形式如下，与上面的写法是等价的。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let obj = {\n  myGeneratorMethod: function* () {\n    // ···\n  }\n};\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("h2",{attrs:{id:"generator-函数的this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数的this"}},[n._v("#")]),n._v(" Generator 函数的"),e("code",[n._v("this")])]),n._v(" "),e("p",[n._v("Generator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，也继承了 Generator 函数的"),e("code",[n._v("prototype")]),n._v("对象上的方法。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* g() {}\n\ng.prototype.hello = function () {\n  return 'hi!';\n};\n\nlet obj = g();\n\nobj instanceof g // true\nobj.hello() // 'hi!'\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("上面代码表明，Generator 函数"),e("code",[n._v("g")]),n._v("返回的遍历器"),e("code",[n._v("obj")]),n._v("，是"),e("code",[n._v("g")]),n._v("的实例，而且继承了"),e("code",[n._v("g.prototype")]),n._v("。但是，如果把"),e("code",[n._v("g")]),n._v("当作普通的构造函数，并不会生效，因为"),e("code",[n._v("g")]),n._v("返回的总是遍历器对象，而不是"),e("code",[n._v("this")]),n._v("对象。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* g() {\n  this.a = 11;\n}\n\nlet obj = g();\nobj.a // undefined\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v("上面代码中，Generator函数"),e("code",[n._v("g")]),n._v("在"),e("code",[n._v("this")]),n._v("对象上面添加了一个属性"),e("code",[n._v("a")]),n._v("，但是"),e("code",[n._v("obj")]),n._v("对象拿不到这个属性。")]),n._v(" "),e("p",[n._v("Generator函数也不能跟"),e("code",[n._v("new")]),n._v("命令一起用，会报错。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* F() {\n  yield this.x = 2;\n  yield this.y = 3;\n}\n\nnew F()\n// TypeError: F is not a constructor\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("上面代码中，"),e("code",[n._v("new")]),n._v("命令跟构造函数"),e("code",[n._v("F")]),n._v("一起使用，结果报错，因为"),e("code",[n._v("F")]),n._v("不是构造函数。")]),n._v(" "),e("p",[n._v("那么，有没有办法让 Generator 函数返回一个正常的对象实例，既可以用"),e("code",[n._v("next")]),n._v("方法，又可以获得正常的"),e("code",[n._v("this")]),n._v("？")]),n._v(" "),e("p",[n._v("下面是一个变通方法。首先，生成一个空对象，使用"),e("code",[n._v("call")]),n._v("方法绑定 Generator 函数内部的"),e("code",[n._v("this")]),n._v("。这样，构造函数调用以后，这个空对象就是 Generator 函数的实例对象了。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* F() {\n  this.a = 1;\n  yield this.b = 2;\n  yield this.c = 3;\n}\nvar obj = {};\nvar f = F.call(obj);\n\nf.next();  // Object {value: 2, done: false}\nf.next();  // Object {value: 3, done: false}\nf.next();  // Object {value: undefined, done: true}\n\nobj.a // 1\nobj.b // 2\nobj.c // 3\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("上面代码中，首先是"),e("code",[n._v("F")]),n._v("内部的"),e("code",[n._v("this")]),n._v("对象绑定"),e("code",[n._v("obj")]),n._v("对象，然后调用它，返回一个 Iterator 对象。这个对象执行三次"),e("code",[n._v("next")]),n._v("方法（因为"),e("code",[n._v("F")]),n._v("内部有两个"),e("code",[n._v("yield")]),n._v("表达式），完成F内部所有代码的运行。这时，所有内部属性都绑定在"),e("code",[n._v("obj")]),n._v("对象上了，因此"),e("code",[n._v("obj")]),n._v("对象也就成了"),e("code",[n._v("F")]),n._v("的实例。")]),n._v(" "),e("p",[n._v("上面代码中，执行的是遍历器对象"),e("code",[n._v("f")]),n._v("，但是生成的对象实例是"),e("code",[n._v("obj")]),n._v("，有没有办法将这两个对象统一呢？")]),n._v(" "),e("p",[n._v("一个办法就是将"),e("code",[n._v("obj")]),n._v("换成"),e("code",[n._v("F.prototype")]),n._v("。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* F() {\n  this.a = 1;\n  yield this.b = 2;\n  yield this.c = 3;\n}\nvar f = F.call(F.prototype);\n\nf.next();  // Object {value: 2, done: false}\nf.next();  // Object {value: 3, done: false}\nf.next();  // Object {value: undefined, done: true}\n\nf.a // 1\nf.b // 2\nf.c // 3\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[n._v("再将"),e("code",[n._v("F")]),n._v("改成构造函数，就可以对它执行"),e("code",[n._v("new")]),n._v("命令了。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function* gen() {\n  this.a = 1;\n  yield this.b = 2;\n  yield this.c = 3;\n}\n\nfunction F() {\n  return gen.call(gen.prototype);\n}\n\nvar f = new F();\n\nf.next();  // Object {value: 2, done: false}\nf.next();  // Object {value: 3, done: false}\nf.next();  // Object {value: undefined, done: true}\n\nf.a // 1\nf.b // 2\nf.c // 3\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);